use eventstore::{Client, EventData, ReadResult};
use serde::{Serialize, Deserialize};
use tokio::sync::mpsc;
use tokio::task;
use tokio_stream::StreamExt;

#[derive(Serialize, Deserialize, Debug)]
struct Foo {
    is_rust_a_nice_language: bool,
}

const MAX_WORKERS: usize = 10;

#[tokio::main(flavor = "multi_thread", worker_threads = 10)]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let settings = "esdb://admin:changeit@localhost:2113".parse()?;
    let client = Client::new(settings)?;

    // Example list of streams to read from. This should come from your input.
    let streams = vec!["stream1", "stream2", "stream3"];

    // Channel for communication between reader and writer tasks.
    let (tx, mut rx) = mpsc::channel::<EventData>(100);

    for stream_name in streams.into_iter() {
        let client_clone = client.clone();
        let tx_clone = tx.clone();
        let stream_name_clone = stream_name.to_owned();

        // Spawn reader task.
        task::spawn(async move {
            let mut stream = client_clone
                .read_stream(stream_name, &Default::default())
                .await
                .expect("Failed to read stream");

            while let Ok(Some(event)) = stream.next().await {
                if let ReadResult::Ok(event) = event {
                    tx_clone.send(event.into()).await.expect("Failed to send event");
                }
            }
        });

        // Spawn writer task.
        let client_clone = client.clone();
        task::spawn(async move {
            while let Some(event) = rx.recv().await {
                // Here, write `event` to the target EventStoreDB stream.
                // This example simply prints the event.
                if let Ok(payload) = event.get_original_event().as_json::<Foo>() {
                    println!("Received: {:?}", payload);
                    // Replace the println! with actual append_to_stream call to write to the target stream.
                }
            }
        });
    }

    // Some mechanism to wait for all tasks to complete or a signal to shutdown.
    // This example lacks such mechanism for brevity.

    Ok(())
}
